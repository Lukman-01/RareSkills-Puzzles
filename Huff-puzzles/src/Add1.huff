/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector from calldata
    0x00 calldataload 0xE0 shr
    
    // Check if it matches add1 function selector
    __FUNC_SIG(add1) eq add1_function jumpi
    
    // If no match, revert
    0x00 0x00 revert
    
    add1_function:
        // Load the uint256 parameter from calldata (skip 4 bytes for function selector)
        0x04 calldataload
        
        // Add 1 to the value
        0x01 add
        
        // Store the result in memory at position 0x00
        0x00 mstore
        
        // Return the 32-byte result
        0x20 0x00 return
}