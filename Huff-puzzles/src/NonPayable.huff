/** 
 *  NON PAYABLE HUFF EXERCISE
 *
 *  When a user sends a transaction to a smart contract, they can include ether with the transaction.
 *  In solidity we denote that we wish to accept this ether by either marking the function as payable or adding a payable fallback/receive function to our contract
 *  
 *  The task is to write within the `MAIN` macro below, huff code that reverts if ether is sent with the transaction.
 */

#define macro MAIN() = takes(0) returns(0) {
    callvalue       // Get the amount of ether sent with the transaction
    iszero          // Check if callvalue is zero (no ether sent)
    success         // Jump to success label if no ether was sent
    jumpi           // Conditional jump: jump if top of stack is non-zero
    
    // If we reach here, ether was sent - revert
    0x00 0x00 revert
    
    success:        // Label for successful execution
        // Contract logic would go here
        // For this exercise, we just need to not revert
}