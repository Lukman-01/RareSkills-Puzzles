/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

// Function selectors
// store(uint256) = bytes4(keccak256("store(uint256)")) = 0x6057361d
// read() = bytes4(keccak256("read()")) = 0x57de26a4
#define constant STORE_SELECTOR = 0x6057361d
#define constant READ_SELECTOR = 0x57de26a4

#define macro STORE() = takes(0) returns(0) {
    // Load the uint256 argument from calldata at offset 4
    0x04 calldataload       // [value]
    
    // Store the value in storage slot 0
    0x00                    // [slot, value]
    sstore                  // [] (stores value at slot 0)
    
    // No return data needed for store function
    stop
}

#define macro READ() = takes(0) returns(0) {
    // Load value from storage slot 0
    0x00                    // [slot]
    sload                   // [value]
    
    // Store value in memory for return
    0x00 mstore             // []
    
    // Return the value (32 bytes from memory offset 0)
    0x20 0x00 return
}

#define macro MAIN() = takes(0) returns(0) {
    // Load function selector from calldata (first 4 bytes)
    0x00 calldataload       // [calldata]
    0xe0 shr                // [selector] (shift right 224 bits to get first 4 bytes)
    
    // Check if selector matches store(uint256)
    dup1                    // [selector, selector]
    [STORE_SELECTOR]        // [store_selector, selector, selector]
    eq                      // [is_store, selector]
    store jumpi             // [selector]
    
    // Check if selector matches read()
    dup1                    // [selector, selector]
    [READ_SELECTOR]         // [read_selector, selector, selector]
    eq                      // [is_read, selector]
    read jumpi              // [selector]
    
    // If no match, revert (unrecognized function)
    0x00 0x00 revert
    
    store:
        pop                 // [] (remove selector from stack)
        STORE()
    
    read:
        pop                 // [] (remove selector from stack)
        READ()
}